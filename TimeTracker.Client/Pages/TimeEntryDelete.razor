@page "/time-entries/{id:long}/delete"
@using TimeTracker.Client.Models
@using TimeTracker.Client.Services
@attribute [Authorize]
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<h1>Delete time entry for @(timeEntry == null ? string.Empty : timeEntry.EntryDate.ToString("MMMM d, yyyy"))</h1>

<div class="alert alert-warning">Are you sure you want to delete this time entry?</div>

@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<button type="button" class="btn btn-danger" @onclick="DeleteTimeEntry">Delete</button>
<a href="/" class="btn btn-link">Cancel</a>

@code {
    [Parameter] public long Id { get; set; }
    private TimeEntryModel timeEntry;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTimeEntry();
    }

    private async Task LoadTimeEntry()
    {
        var url = $"time-entries/{Id}";
        timeEntry = await ApiService.GetAsync<TimeEntryModel>(url);
    }

    private async Task DeleteTimeEntry()
    {
        if (await ApiService.DeleteAsync($"time-entries/{timeEntry.Id}"))
        {
            NavigationManager.NavigateTo("/time-entries");
        }
        else
        {
            errorMessage = "Error saving time entry";
        }
    }
}

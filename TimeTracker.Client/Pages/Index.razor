@page "/"
@using TimeTracker.Client.Models
@using TimeTracker.Client.Security
@using TimeTracker.Client.Services
@attribute [Authorize]
@inject ApiService ApiService
@inject TokenAuthenticationStateProvider AuthStateProvider

<EditForm Model="@this" OnValidSubmit="@LoadTimeEntries">
    <div class="row">
        <div class="col text-right">
            <label for="year" class="form-control-plaintext">Month: </label>
        </div>
        <div class="col">
            <InputSelect id="year" class="form-control" @bind-Value="@year">
                <option value="2019">2019</option>
                <option value="2020">2020</option>
                <option value="2021">2021</option>
                <option value="2022">2022</option>
                <option value="2023">2023</option>
                <option value="2024">2024</option>
                <option value="2025">2025</option>
                <option value="2026">2026</option>
                <option value="2027">2027</option>
                <option value="2028">2028</option>
            </InputSelect>
        </div>
        <div class="col">
            <InputSelect id="month" class="form-control" @bind-Value="@month">
                <option value="1">January</option>
                <option value="2">February</option>
                <option value="3">March</option>
                <option value="4">April</option>
                <option value="5">May</option>
                <option value="6">June</option>
                <option value="7">July</option>
                <option value="8">August</option>
                <option value="9">September</option>
                <option value="10">October</option>
                <option value="11">November</option>
                <option value="12">December</option>
            </InputSelect>
        </div>
        <div class="col">
            <button type="submit" class="btn btn-primary">Search</button>
            <a href="/time-entries/add" class="btn btn-link">Add entry</a>
        </div>
    </div>
</EditForm>

<hr/>

@if (timeEntries == null)
{
    <div>Loading...</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Client name</th>
                <th>Project name</th>
                <th>Date</th>
                <th>Rate</th>
                <th>Hours</th>
                <th>Total</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var timeEntry in timeEntries)
            {
                <tr>
                    <td>@timeEntry.ClientName</td>
                    <td>@timeEntry.ProjectName</td>
                    <td>@timeEntry.EntryDate.ToString("yyyy-MM-dd")</td>
                    <td>@timeEntry.HourRate</td>
                    <td>@timeEntry.Hours</td>
                    <td>@(timeEntry.HourRate * timeEntry.Hours)</td>
                    <td class="text-right">
                        <div class="btn-group" role="group">
                            <a href="/time-entries/@(timeEntry.Id)/edit" class="btn btn-light"><i class="oi oi-pencil"></i> Edit</a>
                            <a href="/time-entries/@(timeEntry.Id)/delete" class="btn btn-light text-danger"><i class="oi oi-delete"></i> Delete</a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="4" class="text-right font-weight-bold">Totals: </td>
                <td class="font-weight-bold">@totalHours</td>
                <td class="font-weight-bold">@totalAmount</td>
            </tr>
        </tfoot>
    </table>
}

@code {
    private TimeEntryModel[] timeEntries;
    private string year;
    private string month;
    private decimal totalAmount;
    private decimal totalHours;

    protected override async Task OnInitializedAsync()
    {
        year = DateTime.Today.Year.ToString();
        month = DateTime.Today.Month.ToString();

        await LoadTimeEntries();
    }

    private async Task LoadTimeEntries()
    {
        var userId = (await AuthStateProvider.GetUserAsync()).Id;
        var url = $"time-entries/user/{userId}/{int.Parse(year)}/{int.Parse(month)}";
        timeEntries = await ApiService.GetAsync<TimeEntryModel[]>(url);

        totalAmount = timeEntries.Sum(x => x.Hours * x.HourRate);
        totalHours = timeEntries.Sum(x => x.Hours);
    }
}
